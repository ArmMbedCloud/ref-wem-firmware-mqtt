From 00bd118534b0d66775c1a166e1d3c1971cf2aea7 Mon Sep 17 00:00:00 2001
From: Nic Costa <nic.costa@arm.com>
Date: Fri, 6 Apr 2018 10:07:51 -0500
Subject: [PATCH 3/4] Display FOTA progress on the LCD

Show progress of the firmware update process on the LCD during boot.

This patch adds support for including the number of steps in the
printProgress message. The printProgress will prefix the message
with '[x/y] ', where 'x' is the current step number and 'y' is the
total number of steps.

The setStep function takes two arguments; the first is the current
step number and the second is the total number of steps.
If the total number of steps is 0 or the current step number is
greater than the total the prefixed message will not be printed.

Signed-off-by: Nic Costa <nic.costa@arm.com>
---
 source/active_application.cpp | 58 +++++++++++++++++++++++++++++++++++------
 source/fota.cpp               | 60 +++++++++++++++++++++++++++++++++++++++++++
 source/fota.h                 | 34 ++++++++++++++++++++++++
 source/upgrade.cpp            |  3 +++
 4 files changed, 147 insertions(+), 8 deletions(-)
 create mode 100644 source/fota.cpp
 create mode 100644 source/fota.h

diff --git a/source/active_application.cpp b/source/active_application.cpp
index 53bd9c0..d7de3ea 100755
--- a/source/active_application.cpp
+++ b/source/active_application.cpp
@@ -20,6 +20,7 @@
 #define __STDC_FORMAT_MACROS
 #endif
 
+#include "fota.h"
 #include "active_application.h"
 #include "bootloader_common.h"
 
@@ -80,6 +81,11 @@ bool readActiveFirmwareHeader(arm_uc_firmware_details_t* details)
             if (event_callback == ARM_UC_PAAL_EVENT_GET_ACTIVE_FIRMWARE_DETAILS_DONE)
             {
                 result = true;
+
+                tr_info("Active firmware header");
+                tr_info("    version : %llu", details->version);
+                tr_info("    size    : %llu", details->size);
+                printSHA256(details->hash);
             }
         }
     }
@@ -115,10 +121,12 @@ int checkActiveApplication(arm_uc_firmware_details_t* details)
         {
             uint32_t appStart = MBED_CONF_APP_APPLICATION_START_ADDRESS;
 
-            tr_debug("header start: 0x%08" PRIX32,
-                     (uint32_t) FIRMWARE_METADATA_HEADER_ADDRESS);
-            tr_debug("app start: 0x%08" PRIX32, appStart);
-            tr_debug("app size: %" PRIu64, details->size);
+            tr_info("header start: 0x%08" PRIX32,
+                    (uint32_t) FIRMWARE_METADATA_HEADER_ADDRESS);
+            tr_info("header size: %" PRIu32,
+                      (uint32_t) FIRMWARE_METADATA_HEADER_SIZE);
+            tr_info("app start: 0x%08" PRIX32, appStart);
+            tr_info("app size: %" PRIu64, details->size);
 
             /* initialize hashing facility */
             mbedtls_sha256_context mbedtls_ctx;
@@ -140,6 +148,10 @@ int checkActiveApplication(arm_uc_firmware_details_t* details)
                 status = flash.read(buffer_array,
                                     appStart + (details->size - remaining),
                                     readSize);
+                if (0 != status) {
+                    tr_error("failed to read %u bytes from offset 0x%08" PRIX32,
+                             readSize, appStart + (details->size - remaining));
+                }
 
                 /* update hash */
                 mbedtls_sha256_update(&mbedtls_ctx, buffer_array, readSize);
@@ -150,6 +162,9 @@ int checkActiveApplication(arm_uc_firmware_details_t* details)
 #if defined(SHOW_PROGRESS_BAR) && SHOW_PROGRESS_BAR == 1
                 printProgress(details->size - remaining,
                               details->size);
+                fota::printProgress(details->size - remaining,
+                                    details->size,
+                                    "CHK Active");
 #endif
             }
 
@@ -201,9 +216,10 @@ bool eraseActiveFirmware(uint32_t firmwareSize)
     if (erase_address < (MBED_CONF_APP_MAX_APPLICATION_SIZE + \
                          MBED_CONF_APP_APPLICATION_START_ADDRESS))
     {
-        tr_debug("Erasing from 0x%08" PRIX32 " to 0x%08" PRIX32,
-                 (uint32_t) FIRMWARE_METADATA_HEADER_ADDRESS,
-                 (uint32_t) erase_address);
+        tr_info("start flash erase");
+        tr_info("Erasing from 0x%08" PRIX32 " to 0x%08" PRIX32,
+                (uint32_t) FIRMWARE_METADATA_HEADER_ADDRESS,
+                (uint32_t) erase_address);
 
         /* Erase flash to make place for new application. Erasing sector by sector as some
            platforms have varible sector sizes and mbed-os cannot deal with erasing multiple
@@ -216,7 +232,7 @@ bool eraseActiveFirmware(uint32_t firmwareSize)
                                  sector_size);
             if (result != 0)
             {
-                tr_debug("Erasing from 0x%08" PRIX32 " to 0x%08" PRIX32 " failed with retval %i",
+                tr_error("Erasing from 0x%08" PRIX32 " to 0x%08" PRIX32 " failed with retval %i",
                          erase_address, erase_address + sector_size, result);
                 break;
             }
@@ -224,7 +240,11 @@ bool eraseActiveFirmware(uint32_t firmwareSize)
             {
                 erase_address += sector_size;
             }
+            fota::printProgress(erase_address - FIRMWARE_METADATA_HEADER_ADDRESS,
+                                size_needed,
+                                "Erasing");
         }
+        tr_info("end flash erase");
     }
     else
     {
@@ -243,6 +263,8 @@ bool writeActiveFirmwareHeader(arm_uc_firmware_details_t* details)
 
     bool result = false;
 
+    fota::printProgress(0, 100, "Write HDR");
+    tr_info("start flash HDR write");
     if (details)
     {
         /* round up program size to nearest page size */
@@ -277,6 +299,7 @@ bool writeActiveFirmwareHeader(arm_uc_firmware_details_t* details)
             (output_buffer.size == ARM_UC_INTERNAL_HEADER_SIZE_V2))
         {
             /* write header using FlashIAP API */
+            fota::printProgress(33, 100, "Write HDR");
             int ret = flash.program(buffer_array,
                                     FIRMWARE_METADATA_HEADER_ADDRESS,
                                     programSize);
@@ -285,6 +308,8 @@ bool writeActiveFirmwareHeader(arm_uc_firmware_details_t* details)
         }
     }
 
+    fota::printProgress(100, 100, "Write HDR");
+    tr_info("end flash HDR write");
     return result;
 }
 
@@ -294,6 +319,8 @@ bool writeActiveFirmware(uint32_t index, arm_uc_firmware_details_t* details)
 
     bool result = false;
 
+    fota::printProgress(0, 100, "Write FW");
+    tr_info("start flash write");
     if (details)
     {
         const uint32_t pageSize = flash.get_page_size();
@@ -368,6 +395,9 @@ bool writeActiveFirmware(uint32_t index, arm_uc_firmware_details_t* details)
 
 #if defined(SHOW_PROGRESS_BAR) && SHOW_PROGRESS_BAR == 1
                     printProgress(offset + programOffset, details->size);
+                    fota::printProgress(offset + programOffset,
+                                        details->size,
+                                        "Write FW");
 #endif
                 }
 
@@ -386,9 +416,12 @@ bool writeActiveFirmware(uint32_t index, arm_uc_firmware_details_t* details)
             }
         }
 
+        fota::printProgress(100, 100, "Write FW");
+
         result = (retval == 0);
     }
 
+    tr_info("end flash write");
     return result;
 }
 
@@ -406,6 +439,7 @@ bool copyStoredApplication(uint32_t index,
     /* Step 1. Erase active application                                      */
     /*************************************************************************/
 
+    fota::setStep(2, 5);
     result = eraseActiveFirmware(details->size);
 
     /*************************************************************************/
@@ -414,6 +448,7 @@ bool copyStoredApplication(uint32_t index,
 
     if (result)
     {
+        fota::setStep(3, 5);
         result = writeActiveFirmwareHeader(details);
     }
 
@@ -423,6 +458,7 @@ bool copyStoredApplication(uint32_t index,
 
     if (result)
     {
+        fota::setStep(4, 5);
         result = writeActiveFirmware(index, details);
     }
 
@@ -434,10 +470,16 @@ bool copyStoredApplication(uint32_t index,
     {
         tr_info("Verify new active firmware:");
 
+        fota::setStep(5, 5);
         int recheck = checkActiveApplication(details);
 
         result = (recheck == RESULT_SUCCESS);
     }
 
+    if (!result) {
+        fota::setStep(0, 0);
+        fota::printProgress(0, 1, "UPDATE FAILED!");
+    }
+
     return result;
 }
diff --git a/source/fota.cpp b/source/fota.cpp
new file mode 100644
index 0000000..ca6cab2
--- /dev/null
+++ b/source/fota.cpp
@@ -0,0 +1,60 @@
+#include "fota.h"
+
+/* Since this structure needs to be accessed by both the setStep
+ * and printProgress calls we statically declare it here.
+ *
+ * @param current The step number in progress.
+ * @param total The number of total steps.
+ */
+static struct {
+    uint32_t current;
+    uint32_t total;
+} steps = { 0, 0 };
+
+/** Wrapper function for obtaining the active display manager. There is
+ * only a single occurring instance of this at any given time.
+ *
+ * @return Returns a pointer to the active display manager.
+ */
+DisplayMan *fota::getDisplayManager(void)
+{
+    static DisplayMan display;
+    display.init("FOTA");
+    display.set_downloading();
+    display.refresh();
+    return &display;
+}
+
+/** Prints the progress of the current activity to the LCD using the
+ * current active display manager.
+ *
+ * @param progress The current progress being made.
+ * @param total The total, or maximum, value of progress to be made.
+ * @param msg An optional message to be displayed (default '...')
+ */
+void fota::printProgress(uint32_t progress, uint32_t total, const char *msg)
+{
+    char buf[17] = {0}; /* assume 16 character LCD screen */
+
+    if (0 != steps.total && steps.current <= steps.total) {
+        snprintf(buf, sizeof(buf) - 1, "[%lu/%lu] %s", steps.current, steps.total, msg);
+    } else {
+        snprintf(buf, sizeof(buf) - 1, "%s", msg);
+    }
+
+    DisplayMan *display = getDisplayManager();
+    display->set_progress(buf, progress, total);
+    display->refresh();
+}
+
+/** Sets the current step number and the total number of steps to be prefixed
+ * to the printProgress message.
+ *
+ * @param current The step number in progress.
+ * @param total The number of total steps.
+ */
+void fota::setStep(uint32_t current, uint32_t total)
+{
+    steps.current = current;
+    steps.total = total;
+}
diff --git a/source/fota.h b/source/fota.h
new file mode 100644
index 0000000..5ad60b3
--- /dev/null
+++ b/source/fota.h
@@ -0,0 +1,34 @@
+#ifndef __BOOTLOADER_FOTA_H__
+#define __BOOTLOADER_FOTA_H__
+
+#include "displayman.h"
+
+namespace fota {
+
+/** Wrapper function for obtaining the active display manager. There is
+ * only a single occurring instance of this at any given time.
+ *
+ * @return Returns a pointer to the active display manager.
+ */
+DisplayMan *getDisplayManager(void);
+
+/** Prints the progress of the current activity to the LCD using the
+ * current active display manager.
+ *
+ * @param progress The current progress being made.
+ * @param total The total, or maximum, value of progress to be made.
+ * @param msg An optional message to be displayed (default '...')
+ */
+void printProgress(uint32_t progress, uint32_t total, const char *msg = "...");
+
+/** Sets the current step number and the total number of steps to be prefixed
+ * to the printProgress message.
+ *
+ * @param current The step number in progress.
+ * @param total The number of total steps.
+ */
+void setStep(uint32_t current, uint32_t total);
+
+} // end namespace fota
+
+#endif
diff --git a/source/upgrade.cpp b/source/upgrade.cpp
index ae970a6..0a16f7f 100755
--- a/source/upgrade.cpp
+++ b/source/upgrade.cpp
@@ -20,6 +20,7 @@
 #define __STDC_FORMAT_MACROS
 #endif
 
+#include "fota.h"
 #include "upgrade.h"
 
 #include "update-client-paal/arm_uc_paal_update.h"
@@ -131,6 +132,7 @@ bool checkStoredApplication(uint32_t source,
 
 #if defined(SHOW_PROGRESS_BAR) && SHOW_PROGRESS_BAR == 1
             printProgress(offset, details->size);
+            fota::printProgress(offset, details->size, "CHK Flash");
 #endif
         }
 
@@ -333,6 +335,7 @@ bool upgradeApplicationFromStorage(void)
                         index);
 
                 /* Validate candidate firmware body. */
+                fota::setStep(1, 5);
                 bool firmwareValid = checkStoredApplication(index,
                                                             &imageDetails);
 
-- 
2.16.1

